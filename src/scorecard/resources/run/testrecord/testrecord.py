# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from __future__ import annotations

from typing import Dict, Union, Optional

import httpx

from .score import (
    ScoreResource,
    AsyncScoreResource,
    ScoreResourceWithRawResponse,
    AsyncScoreResourceWithRawResponse,
    ScoreResourceWithStreamingResponse,
    AsyncScoreResourceWithStreamingResponse,
)
from ...._types import NOT_GIVEN, Body, Query, Headers, NotGiven
from ...._utils import (
    maybe_transform,
    async_maybe_transform,
)
from ...._compat import cached_property
from ...._resource import SyncAPIResource, AsyncAPIResource
from ...._response import (
    to_raw_response_wrapper,
    to_streamed_response_wrapper,
    async_to_raw_response_wrapper,
    async_to_streamed_response_wrapper,
)
from ....types.run import testrecord_create_params
from ...._base_client import make_request_options
from ....types.run.testrecord.testrecord import Testrecord

__all__ = ["TestrecordResource", "AsyncTestrecordResource"]


class TestrecordResource(SyncAPIResource):
    __test__ = False

    @cached_property
    def score(self) -> ScoreResource:
        return ScoreResource(self._client)

    @cached_property
    def with_raw_response(self) -> TestrecordResourceWithRawResponse:
        """
        This property can be used as a prefix for any HTTP method call to return
        the raw response object instead of the parsed content.

        For more information, see https://www.github.com/stainless-sdks/scorecard-python#accessing-raw-response-data-eg-headers
        """
        return TestrecordResourceWithRawResponse(self)

    @cached_property
    def with_streaming_response(self) -> TestrecordResourceWithStreamingResponse:
        """
        An alternative to `.with_raw_response` that doesn't eagerly read the response body.

        For more information, see https://www.github.com/stainless-sdks/scorecard-python#with_streaming_response
        """
        return TestrecordResourceWithStreamingResponse(self)

    def create(
        self,
        run_id: int,
        *,
        context: Optional[str] | NotGiven = NOT_GIVEN,
        custom_inputs: Optional[Dict[str, testrecord_create_params.CustomInputs]] | NotGiven = NOT_GIVEN,
        custom_labels: Optional[Dict[str, testrecord_create_params.CustomLabels]] | NotGiven = NOT_GIVEN,
        custom_outputs: Optional[Dict[str, testrecord_create_params.CustomOutputs]] | NotGiven = NOT_GIVEN,
        error_message: Optional[str] | NotGiven = NOT_GIVEN,
        ideal: Optional[str] | NotGiven = NOT_GIVEN,
        model_debug_info: Optional[Dict[str, Union[float, str]]] | NotGiven = NOT_GIVEN,
        model_params: Optional[Dict[str, Union[float, str]]] | NotGiven = NOT_GIVEN,
        prompt: Optional[str] | NotGiven = NOT_GIVEN,
        response: Optional[str] | NotGiven = NOT_GIVEN,
        testcase_id: Optional[int] | NotGiven = NOT_GIVEN,
        testset_id: Optional[int] | NotGiven = NOT_GIVEN,
        user_query: Optional[str] | NotGiven = NOT_GIVEN,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN,
    ) -> Testrecord:
        """
        Create a new Testrecord

        Args:
          run_id: The ID of the Run to create the Testrecord in.

          context: The context that was used while generating the testrecord.

          error_message: The error message for the testrecord.

          ideal: The ideal response.

          model_debug_info: Debug information generated by Scorecard during the execution of the testrecord.

          model_params: The model parameters used to generate the response.

          prompt: The prompt used to generate the response.

          response: The response generated by the model.

          user_query: The user query that was executed for the testrecord.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        return self._post(
            f"/v1/run/{run_id}/testrecord",
            body=maybe_transform(
                {
                    "context": context,
                    "custom_inputs": custom_inputs,
                    "custom_labels": custom_labels,
                    "custom_outputs": custom_outputs,
                    "error_message": error_message,
                    "ideal": ideal,
                    "model_debug_info": model_debug_info,
                    "model_params": model_params,
                    "prompt": prompt,
                    "response": response,
                    "testcase_id": testcase_id,
                    "testset_id": testset_id,
                    "user_query": user_query,
                },
                testrecord_create_params.TestrecordCreateParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=Testrecord,
        )

    def retrieve(
        self,
        testrecord_id: int,
        *,
        run_id: int,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN,
    ) -> Testrecord:
        """
        Retrieve Testrecord metadata

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        return self._get(
            f"/v1/run/{run_id}/testrecord/{testrecord_id}",
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=Testrecord,
        )


class AsyncTestrecordResource(AsyncAPIResource):
    @cached_property
    def score(self) -> AsyncScoreResource:
        return AsyncScoreResource(self._client)

    @cached_property
    def with_raw_response(self) -> AsyncTestrecordResourceWithRawResponse:
        """
        This property can be used as a prefix for any HTTP method call to return
        the raw response object instead of the parsed content.

        For more information, see https://www.github.com/stainless-sdks/scorecard-python#accessing-raw-response-data-eg-headers
        """
        return AsyncTestrecordResourceWithRawResponse(self)

    @cached_property
    def with_streaming_response(self) -> AsyncTestrecordResourceWithStreamingResponse:
        """
        An alternative to `.with_raw_response` that doesn't eagerly read the response body.

        For more information, see https://www.github.com/stainless-sdks/scorecard-python#with_streaming_response
        """
        return AsyncTestrecordResourceWithStreamingResponse(self)

    async def create(
        self,
        run_id: int,
        *,
        context: Optional[str] | NotGiven = NOT_GIVEN,
        custom_inputs: Optional[Dict[str, testrecord_create_params.CustomInputs]] | NotGiven = NOT_GIVEN,
        custom_labels: Optional[Dict[str, testrecord_create_params.CustomLabels]] | NotGiven = NOT_GIVEN,
        custom_outputs: Optional[Dict[str, testrecord_create_params.CustomOutputs]] | NotGiven = NOT_GIVEN,
        error_message: Optional[str] | NotGiven = NOT_GIVEN,
        ideal: Optional[str] | NotGiven = NOT_GIVEN,
        model_debug_info: Optional[Dict[str, Union[float, str]]] | NotGiven = NOT_GIVEN,
        model_params: Optional[Dict[str, Union[float, str]]] | NotGiven = NOT_GIVEN,
        prompt: Optional[str] | NotGiven = NOT_GIVEN,
        response: Optional[str] | NotGiven = NOT_GIVEN,
        testcase_id: Optional[int] | NotGiven = NOT_GIVEN,
        testset_id: Optional[int] | NotGiven = NOT_GIVEN,
        user_query: Optional[str] | NotGiven = NOT_GIVEN,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN,
    ) -> Testrecord:
        """
        Create a new Testrecord

        Args:
          run_id: The ID of the Run to create the Testrecord in.

          context: The context that was used while generating the testrecord.

          error_message: The error message for the testrecord.

          ideal: The ideal response.

          model_debug_info: Debug information generated by Scorecard during the execution of the testrecord.

          model_params: The model parameters used to generate the response.

          prompt: The prompt used to generate the response.

          response: The response generated by the model.

          user_query: The user query that was executed for the testrecord.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        return await self._post(
            f"/v1/run/{run_id}/testrecord",
            body=await async_maybe_transform(
                {
                    "context": context,
                    "custom_inputs": custom_inputs,
                    "custom_labels": custom_labels,
                    "custom_outputs": custom_outputs,
                    "error_message": error_message,
                    "ideal": ideal,
                    "model_debug_info": model_debug_info,
                    "model_params": model_params,
                    "prompt": prompt,
                    "response": response,
                    "testcase_id": testcase_id,
                    "testset_id": testset_id,
                    "user_query": user_query,
                },
                testrecord_create_params.TestrecordCreateParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=Testrecord,
        )

    async def retrieve(
        self,
        testrecord_id: int,
        *,
        run_id: int,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN,
    ) -> Testrecord:
        """
        Retrieve Testrecord metadata

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        return await self._get(
            f"/v1/run/{run_id}/testrecord/{testrecord_id}",
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=Testrecord,
        )


class TestrecordResourceWithRawResponse:
    __test__ = False

    def __init__(self, testrecord: TestrecordResource) -> None:
        self._testrecord = testrecord

        self.create = to_raw_response_wrapper(
            testrecord.create,
        )
        self.retrieve = to_raw_response_wrapper(
            testrecord.retrieve,
        )

    @cached_property
    def score(self) -> ScoreResourceWithRawResponse:
        return ScoreResourceWithRawResponse(self._testrecord.score)


class AsyncTestrecordResourceWithRawResponse:
    def __init__(self, testrecord: AsyncTestrecordResource) -> None:
        self._testrecord = testrecord

        self.create = async_to_raw_response_wrapper(
            testrecord.create,
        )
        self.retrieve = async_to_raw_response_wrapper(
            testrecord.retrieve,
        )

    @cached_property
    def score(self) -> AsyncScoreResourceWithRawResponse:
        return AsyncScoreResourceWithRawResponse(self._testrecord.score)


class TestrecordResourceWithStreamingResponse:
    __test__ = False

    def __init__(self, testrecord: TestrecordResource) -> None:
        self._testrecord = testrecord

        self.create = to_streamed_response_wrapper(
            testrecord.create,
        )
        self.retrieve = to_streamed_response_wrapper(
            testrecord.retrieve,
        )

    @cached_property
    def score(self) -> ScoreResourceWithStreamingResponse:
        return ScoreResourceWithStreamingResponse(self._testrecord.score)


class AsyncTestrecordResourceWithStreamingResponse:
    def __init__(self, testrecord: AsyncTestrecordResource) -> None:
        self._testrecord = testrecord

        self.create = async_to_streamed_response_wrapper(
            testrecord.create,
        )
        self.retrieve = async_to_streamed_response_wrapper(
            testrecord.retrieve,
        )

    @cached_property
    def score(self) -> AsyncScoreResourceWithStreamingResponse:
        return AsyncScoreResourceWithStreamingResponse(self._testrecord.score)
