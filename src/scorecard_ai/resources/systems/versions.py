# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from __future__ import annotations

from typing import Dict

import httpx

from ..._types import NOT_GIVEN, Body, Query, Headers, NotGiven
from ..._utils import maybe_transform, async_maybe_transform
from ..._compat import cached_property
from ..._resource import SyncAPIResource, AsyncAPIResource
from ..._response import (
    to_raw_response_wrapper,
    to_streamed_response_wrapper,
    async_to_raw_response_wrapper,
    async_to_streamed_response_wrapper,
)
from ..._base_client import make_request_options
from ...types.systems import version_upsert_params
from ...types.systems.system_version import SystemVersion

__all__ = ["VersionsResource", "AsyncVersionsResource"]


class VersionsResource(SyncAPIResource):
    @cached_property
    def with_raw_response(self) -> VersionsResourceWithRawResponse:
        """
        This property can be used as a prefix for any HTTP method call to return
        the raw response object instead of the parsed content.

        For more information, see https://www.github.com/scorecard-ai/scorecard-python#accessing-raw-response-data-eg-headers
        """
        return VersionsResourceWithRawResponse(self)

    @cached_property
    def with_streaming_response(self) -> VersionsResourceWithStreamingResponse:
        """
        An alternative to `.with_raw_response` that doesn't eagerly read the response body.

        For more information, see https://www.github.com/scorecard-ai/scorecard-python#with_streaming_response
        """
        return VersionsResourceWithStreamingResponse(self)

    def get(
        self,
        system_version_id: str,
        *,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN,
    ) -> SystemVersion:
        """
        Retrieve a specific system version by ID.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not system_version_id:
            raise ValueError(f"Expected a non-empty value for `system_version_id` but received {system_version_id!r}")
        return self._get(
            f"/systems/versions/{system_version_id}",
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=SystemVersion,
        )

    def upsert(
        self,
        system_id: str,
        *,
        config: Dict[str, object],
        name: str | NotGiven = NOT_GIVEN,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN,
    ) -> SystemVersion:
        """Create a new system version if it does not already exist.

        Does **not** set the
        created version to be the system's production version.

        If there is already a system version with the same config, its name will be
        updated.

        Args:
          config: The configuration of the system version.

          name: The name of the system version. If creating a new system version and the name
              isn't provided, it will be autogenerated.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not system_id:
            raise ValueError(f"Expected a non-empty value for `system_id` but received {system_id!r}")
        return self._post(
            f"/systems/{system_id}/versions",
            body=maybe_transform(
                {
                    "config": config,
                    "name": name,
                },
                version_upsert_params.VersionUpsertParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=SystemVersion,
        )


class AsyncVersionsResource(AsyncAPIResource):
    @cached_property
    def with_raw_response(self) -> AsyncVersionsResourceWithRawResponse:
        """
        This property can be used as a prefix for any HTTP method call to return
        the raw response object instead of the parsed content.

        For more information, see https://www.github.com/scorecard-ai/scorecard-python#accessing-raw-response-data-eg-headers
        """
        return AsyncVersionsResourceWithRawResponse(self)

    @cached_property
    def with_streaming_response(self) -> AsyncVersionsResourceWithStreamingResponse:
        """
        An alternative to `.with_raw_response` that doesn't eagerly read the response body.

        For more information, see https://www.github.com/scorecard-ai/scorecard-python#with_streaming_response
        """
        return AsyncVersionsResourceWithStreamingResponse(self)

    async def get(
        self,
        system_version_id: str,
        *,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN,
    ) -> SystemVersion:
        """
        Retrieve a specific system version by ID.

        Args:
          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not system_version_id:
            raise ValueError(f"Expected a non-empty value for `system_version_id` but received {system_version_id!r}")
        return await self._get(
            f"/systems/versions/{system_version_id}",
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=SystemVersion,
        )

    async def upsert(
        self,
        system_id: str,
        *,
        config: Dict[str, object],
        name: str | NotGiven = NOT_GIVEN,
        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.
        # The extra values given here take precedence over values defined on the client or passed to this method.
        extra_headers: Headers | None = None,
        extra_query: Query | None = None,
        extra_body: Body | None = None,
        timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN,
    ) -> SystemVersion:
        """Create a new system version if it does not already exist.

        Does **not** set the
        created version to be the system's production version.

        If there is already a system version with the same config, its name will be
        updated.

        Args:
          config: The configuration of the system version.

          name: The name of the system version. If creating a new system version and the name
              isn't provided, it will be autogenerated.

          extra_headers: Send extra headers

          extra_query: Add additional query parameters to the request

          extra_body: Add additional JSON properties to the request

          timeout: Override the client-level default timeout for this request, in seconds
        """
        if not system_id:
            raise ValueError(f"Expected a non-empty value for `system_id` but received {system_id!r}")
        return await self._post(
            f"/systems/{system_id}/versions",
            body=await async_maybe_transform(
                {
                    "config": config,
                    "name": name,
                },
                version_upsert_params.VersionUpsertParams,
            ),
            options=make_request_options(
                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout
            ),
            cast_to=SystemVersion,
        )


class VersionsResourceWithRawResponse:
    def __init__(self, versions: VersionsResource) -> None:
        self._versions = versions

        self.get = to_raw_response_wrapper(
            versions.get,
        )
        self.upsert = to_raw_response_wrapper(
            versions.upsert,
        )


class AsyncVersionsResourceWithRawResponse:
    def __init__(self, versions: AsyncVersionsResource) -> None:
        self._versions = versions

        self.get = async_to_raw_response_wrapper(
            versions.get,
        )
        self.upsert = async_to_raw_response_wrapper(
            versions.upsert,
        )


class VersionsResourceWithStreamingResponse:
    def __init__(self, versions: VersionsResource) -> None:
        self._versions = versions

        self.get = to_streamed_response_wrapper(
            versions.get,
        )
        self.upsert = to_streamed_response_wrapper(
            versions.upsert,
        )


class AsyncVersionsResourceWithStreamingResponse:
    def __init__(self, versions: AsyncVersionsResource) -> None:
        self._versions = versions

        self.get = async_to_streamed_response_wrapper(
            versions.get,
        )
        self.upsert = async_to_streamed_response_wrapper(
            versions.upsert,
        )
